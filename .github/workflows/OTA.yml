name: OTA

on: 
  push:
    branches:
      - main
  workflow_dispatch: 

concurrency:
  group: production
  cancel-in-progress: true

env:
  REPO: ${{ github.repository }}
  PIO_ENV: esp32doit-devkit-v1
  PIO_PROJECT_DIR: firmware
  BIN_PATH: ${{ format('{0}/.pio/build/{1}/firmware.bin', github.workspace, vars.PIO_ENV ) }}
  S3_PUBLIC_URL: "https://f005.backblazeb2.com/file/esp32-bucket/esp32-firmware/firmware.bin"

jobs:
  build_upload:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Get version from file
        id: get_version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Install PlatformIO Core
        run: pip install --upgrade platformio

      - name: Build PlatformIO Project
        run: |
          cd ${{ env.PIO_PROJECT_DIR }}
          pio run --environment ${{ env.PIO_ENV }} --project-dir .

      - name: Create aws-cli container
        run: docker run --entrypoint /bin/sh -itd --name aws-cli amazon/aws-cli:2.11.10

      - name: Configure access key
        run: docker exec aws-cli aws configure set aws_access_key_id ${{ secrets.S3_ACCESS_KEY_ID }}

      - name: Configure secret key
        run: docker exec aws-cli aws configure set aws_secret_access_key ${{ secrets.S3_SECRET_ACCESS_KEY }}

      - name: Copy firmware.bin to aws-cli container
        run: docker cp firmware/.pio/build/${{ env.PIO_ENV }}/firmware.bin aws-cli:/firmware.bin

      - name: Upload firmware.bin to S3 bucket
        run: >-
          docker exec aws-cli aws s3 cp /firmware.bin s3://esp32-firmware/
          --output json
          --endpoint-url https://esp32-bucket.s3.us-east-005.backblazeb2.com
          --region us-east-005

  publish:
    needs: build_upload
    runs-on: ubuntu-latest
    steps:
      - name: Publish MQTT message
        run: |
          docker run hivemq/mqtt-cli pub \
          --topic ${{ vars.MQTT_PUB_TOPIC }} \
          --retain \
          --qos 2 \
          --contentType application/json \
          --host ${{ secrets.MQTT_HOST }} \
          --port ${{ secrets.MQTT_PORT }} \
          --mqttVersion ${{ secrets.MQTT_VERSION }} \
          --secure \
          --user ${{ secrets.MQTT_USER }} \
          --password ${{ secrets.MQTT_PASSWORD }} \
          --message "{
            \"repository\": \"${{ env.REPO }}\",
            \"version\": \"${{ needs.build_upload.outputs.version }}\",
            \"url\": \"${{ env.S3_PUBLIC_URL }}\",
            \"applyToAllDevices\": true,
            \"groups\": []
          }"
